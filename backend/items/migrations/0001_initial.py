# Generated by Django 5.1.7 on 2025-04-23 20:58

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('categories', '0001_initial'),
        ('profiles', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ItemCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название состояния предмета', max_length=50, unique=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, help_text='Подробное описание состояния', null=True, verbose_name='Описание')),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='Порядок отображения в списке', verbose_name='Порядок')),
            ],
            options={
                'verbose_name': 'Состояние предмета',
                'verbose_name_plural': 'Состояния предметов',
                'db_table': 'item_conditions',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ItemStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название статуса предмета', max_length=50, unique=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, help_text='Подробное описание статуса', null=True, verbose_name='Описание')),
                ('is_active', models.BooleanField(default=True, help_text='Доступен ли статус для выбора', verbose_name='Активен')),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='Порядок отображения в списке', verbose_name='Порядок')),
            ],
            options={
                'verbose_name': 'Статус предмета',
                'verbose_name_plural': 'Статусы предметов',
                'db_table': 'item_statuses',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ItemTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название тега', max_length=50, unique=True, verbose_name='Название')),
                ('slug', models.SlugField(help_text='URL-совместимое имя тега', unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
                'db_table': 'item_tags',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата удаления')),
                ('title', models.CharField(help_text='Название предмета', max_length=200, verbose_name='Название')),
                ('slug', models.SlugField(blank=True, help_text='URL-совместимое имя предмета', max_length=250, verbose_name='Slug')),
                ('description', models.TextField(help_text='Подробное описание предмета', verbose_name='Описание')),
                ('estimated_value', models.DecimalField(blank=True, decimal_places=2, help_text='Приблизительная стоимость в рублях (для информации)', max_digits=10, null=True, verbose_name='Приблизительная стоимость')),
                ('views_count', models.PositiveIntegerField(default=0, help_text='Сколько раз просматривали предмет', verbose_name='Количество просмотров')),
                ('favorites_count', models.PositiveIntegerField(default=0, help_text='Сколько раз добавляли в избранное', verbose_name='В избранном')),
                ('is_featured', models.BooleanField(default=False, help_text='Отображать в рекомендуемых предметах', verbose_name='Рекомендуемый')),
                ('category', models.ForeignKey(help_text='Категория предмета', on_delete=django.db.models.deletion.PROTECT, related_name='items', to='categories.category', verbose_name='Категория')),
                ('location', models.ForeignKey(blank=True, help_text='Местоположение предмета', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='profiles.location', verbose_name='Местоположение')),
                ('owner', models.ForeignKey(help_text='Пользователь, которому принадлежит предмет', on_delete=django.db.models.deletion.CASCADE, related_name='items', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
                ('condition', models.ForeignKey(help_text='Состояние предмета (новый, б/у и т.д.)', on_delete=django.db.models.deletion.PROTECT, related_name='items', to='items.itemcondition', verbose_name='Состояние')),
                ('status', models.ForeignKey(help_text='Текущий статус предмета', on_delete=django.db.models.deletion.PROTECT, related_name='items', to='items.itemstatus', verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Предмет',
                'verbose_name_plural': 'Предметы',
                'db_table': 'items',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ItemImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('image', models.ImageField(help_text='Файл изображения', upload_to='item_images/', verbose_name='Изображение')),
                ('is_primary', models.BooleanField(default=False, help_text='Является ли изображение основным', verbose_name='Основное изображение')),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='Порядок отображения изображения', verbose_name='Порядок')),
                ('item', models.ForeignKey(help_text='Предмет, к которому относится изображение', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='items.item', verbose_name='Предмет')),
            ],
            options={
                'verbose_name': 'Изображение предмета',
                'verbose_name_plural': 'Изображения предметов',
                'db_table': 'item_images',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ItemTagRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_relations', to='items.item', verbose_name='Предмет')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_relations', to='items.itemtag', verbose_name='Тег')),
            ],
            options={
                'verbose_name': 'Связь предмета с тегом',
                'verbose_name_plural': 'Связи предметов с тегами',
                'db_table': 'item_tag_relations',
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('user', models.ForeignKey(help_text='Пользователь, добавивший в избранное', on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('item', models.ForeignKey(help_text='Предмет, добавленный в избранное', on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='items.item', verbose_name='Предмет')),
            ],
            options={
                'verbose_name': 'Избранное',
                'verbose_name_plural': 'Избранное',
                'db_table': 'favorites',
                'unique_together': {('user', 'item')},
            },
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['category'], name='item_category_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['status'], name='item_status_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['owner'], name='item_owner_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['created_at'], name='item_created_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='itemtagrelation',
            unique_together={('item', 'tag')},
        ),
    ]
