# Generated by Django 5.1.7 on 2025-04-23 20:58

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('items', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TradeStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название статуса обмена', max_length=50, unique=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, help_text='Подробное описание статуса', null=True, verbose_name='Описание')),
                ('is_active', models.BooleanField(default=True, help_text='Доступен ли статус для выбора', verbose_name='Активен')),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='Порядок отображения в списке', verbose_name='Порядок')),
            ],
            options={
                'verbose_name': 'Статус обмена',
                'verbose_name_plural': 'Статусы обменов',
                'db_table': 'trade_statuses',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TradeOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('message', models.TextField(blank=True, help_text='Сопроводительное сообщение к предложению', null=True, verbose_name='Сообщение')),
                ('is_countered', models.BooleanField(default=False, help_text='Является ли встречным предложением', verbose_name='Встречное предложение')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Дата завершения обмена', null=True, verbose_name='Дата завершения')),
                ('initiator', models.ForeignKey(help_text='Пользователь, инициировавший обмен', on_delete=django.db.models.deletion.CASCADE, related_name='initiated_offers', to=settings.AUTH_USER_MODEL, verbose_name='Инициатор')),
                ('parent_offer', models.ForeignKey(blank=True, help_text='Исходное предложение, если это встречное', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='counter_offers', to='trades.tradeoffer', verbose_name='Исходное предложение')),
                ('receiver', models.ForeignKey(help_text='Пользователь, получивший предложение', on_delete=django.db.models.deletion.CASCADE, related_name='received_offers', to=settings.AUTH_USER_MODEL, verbose_name='Получатель')),
                ('status', models.ForeignKey(help_text='Текущий статус предложения', on_delete=django.db.models.deletion.PROTECT, related_name='offers', to='trades.tradestatus', verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Предложение обмена',
                'verbose_name_plural': 'Предложения обмена',
                'db_table': 'trade_offers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TradeHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('comment', models.TextField(blank=True, help_text='Комментарий к изменению статуса', null=True, verbose_name='Комментарий')),
                ('changed_by', models.ForeignKey(help_text='Пользователь, изменивший статус', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Изменил')),
                ('trade_offer', models.ForeignKey(help_text='Предложение обмена, статус которого изменился', on_delete=django.db.models.deletion.CASCADE, related_name='history', to='trades.tradeoffer', verbose_name='Предложение обмена')),
                ('new_status', models.ForeignKey(help_text='Статус после изменения', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='trades.tradestatus', verbose_name='Новый статус')),
                ('previous_status', models.ForeignKey(help_text='Статус до изменения', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='trades.tradestatus', verbose_name='Предыдущий статус')),
            ],
            options={
                'verbose_name': 'История обмена',
                'verbose_name_plural': 'История обменов',
                'db_table': 'trade_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TradeOfferItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_from_initiator', models.BooleanField(help_text='Предлагается ли предмет инициатором', verbose_name='От инициатора')),
                ('item', models.ForeignKey(help_text='Предмет, предлагаемый для обмена', on_delete=django.db.models.deletion.CASCADE, related_name='trade_offers', to='items.item', verbose_name='Предмет')),
                ('trade_offer', models.ForeignKey(help_text='Предложение обмена, к которому относится предмет', on_delete=django.db.models.deletion.CASCADE, related_name='trade_items', to='trades.tradeoffer', verbose_name='Предложение обмена')),
            ],
            options={
                'verbose_name': 'Предмет предложения',
                'verbose_name_plural': 'Предметы предложения',
                'db_table': 'trade_offer_items',
                'unique_together': {('trade_offer', 'item')},
            },
        ),
    ]
