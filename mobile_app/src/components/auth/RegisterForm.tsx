import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, ScrollView } from 'react-native';
import { useAppDispatch, useAppSelector } from '../../store/hooks';
import { register } from '../../features/auth/authThunks';
import { setValidationErrors as setReduxValidationErrors } from '../../features/auth/authSlice';
import { FormContainer } from '../common/FormContainer';
import { PasswordField } from '../common/PasswordField';
import { RegisterData } from '../../types/auth';
import { useForm } from '../../hooks/useForm';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { validateUsername, validatePassword, validatePasswordConfirmation, validateEmail } from '../../utils/validation';

type RootStackParamList = {
    Login: undefined;
    Register: undefined;
    Home: undefined;
};

type NavigationProp = NativeStackNavigationProp<RootStackParamList>;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞—Ä–æ–ª—é
const PasswordRequirements: React.FC<{ password: string; username: string }> = ({ password, username }) => {
    const requirements = [
        { text: '–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤', check: password.length >= 8 },
        { text: '–ù–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä', check: !/^\d+$/.test(password) },
        { text: '–ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º', check: !['password', '123456', '123456789', 'qwerty', '147852369'].includes(password.toLowerCase()) },
        { text: '–û—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', check: password.toLowerCase() !== username.toLowerCase() },
    ];

    return (
        <View style={styles.passwordRequirements}>
            <Text style={styles.requirementsTitle}>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:</Text>
            {requirements.map((req, index) => (
                <View key={index} style={styles.requirementItem}>
                    <Text style={[styles.requirementText, req.check ? styles.requirementMet : styles.requirementNotMet]}>
                        {req.check ? '‚úì' : '‚úó'} {req.text}
                    </Text>
                </View>
            ))}
        </View>
    );
};

export const RegisterForm: React.FC = () => {
    const dispatch = useAppDispatch();
    const navigation = useNavigation<NavigationProp>();
    const { validationErrors: reduxValidationErrors } = useAppSelector((state) => state.auth);
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    useEffect(() => {
        console.log('üîµ RegisterForm –ú–û–ù–¢–ò–†–û–í–ê–ù');
        return () => {
            console.log('üî¥ RegisterForm –†–ê–ó–ú–û–ù–¢–ò–†–û–í–ê–ù');
        };
    }, []);
    
    // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    const [serverErrors, setServerErrors] = useState<Record<string, string[]>>({});
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π serverErrors
    useEffect(() => {
        console.log('üìù serverErrors –∏–∑–º–µ–Ω–∏–ª–∏—Å—å:', serverErrors);
    }, [serverErrors]);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π reduxValidationErrors
    useEffect(() => {
        console.log('üìù reduxValidationErrors –∏–∑–º–µ–Ω–∏–ª–∏—Å—å:', reduxValidationErrors);
    }, [reduxValidationErrors]);

    const validateField = (name: keyof RegisterData, value: string): string[] => {
        switch (name) {
            case 'username':
                return validateUsername(value);
            case 'email':
                return validateEmail(value);
            case 'password':
                return validatePassword(value, values.username);
            case 'password2':
                return validatePasswordConfirmation(value, values.password);
            default:
                return [];
        }
    };

    const {
        values,
        validationErrors,
        isSubmitting,
        isFormValid,
        handleChange,
        handleSubmit,
        getFieldError,
        setValidationErrors,
    } = useForm<RegisterData>({
        initialValues: {
            username: '',
            email: '',
            password: '',
            password2: '',
            first_name: '',
            last_name: '',
        },
        requiredFields: ['username', 'email', 'password', 'password2'],
        validateField,
        onSubmit: async (formData) => {
            try {
                console.log('=== RegisterForm onSubmit –Ω–∞—á–∞–ª–æ ===');
                console.log('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
                
                const result = await dispatch(register(formData));
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç dispatch:', result);
                console.log('–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', result.type);
                console.log('Payload —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', result.payload);
                
                if (register.fulfilled.match(result)) {
                    console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Home');
                    navigation.navigate('Home');
                } else {
                    console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏');
                    if (result.payload) {
                        console.log('Payload —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', result.payload);
                        console.log('–¢–∏–ø payload:', typeof result.payload);
                        console.log('–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ payload –º–∞—Å—Å–∏–≤–æ–º:', Array.isArray(result.payload));
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ payload –æ–±—ä–µ–∫—Ç–æ–º —Å –æ—à–∏–±–∫–∞–º–∏ –ø–æ–ª–µ–π
                        if (typeof result.payload === 'object' && !Array.isArray(result.payload)) {
                            console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫–∏ –ø–æ–ª–µ–π');
                            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—à–∏–±–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è setServerErrors
                            const formattedErrors: Record<string, string[]> = {};
                            Object.entries(result.payload as Record<string, string[]>).forEach(([field, messages]) => {
                                console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ ${field}:`, messages);
                                if (Array.isArray(messages)) {
                                    formattedErrors[field] = messages;
                                } else {
                                    formattedErrors[field] = [messages as string];
                                }
                            });
                            console.log('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', formattedErrors);
                            setServerErrors(formattedErrors);
                            console.log('setServerErrors –≤—ã–∑–≤–∞–Ω');
                            
                            // –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ useForm –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                            setValidationErrors(formattedErrors);
                            console.log('setValidationErrors –≤—ã–∑–≤–∞–Ω');
                        } else {
                            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë –∫–∞–∫ –æ—à–∏–±–∫—É —Ñ–æ—Ä–º—ã
                            console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', result.payload);
                        }
                    } else {
                        console.log('Payload –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                    }
                }
                console.log('=== RegisterForm onSubmit –∫–æ–Ω–µ—Ü ===');
            } catch (error) {
                console.error('=== –û–®–ò–ë–ö–ê –í onSubmit ===');
                console.error('–û—à–∏–±–∫–∞:', error);
                console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞');
                console.error('=== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò ===');
            }
        },
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    const clearFieldErrors = () => {
        // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –∏–∑ Redux
        if (reduxValidationErrors) {
            dispatch(setReduxValidationErrors({}));
        }
        
        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        if (Object.keys(serverErrors).length > 0) {
            setServerErrors({});
        }
    };

    // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è handleChange —Å –æ—á–∏—Å—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    const handleFieldChange = (name: keyof RegisterData, value: string) => {
        handleChange(name, value);
        clearFieldErrors();
    };

    // –§—É–Ω–∫—Ü–∏—è-–∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç PasswordField
    const handlePasswordChange = (name: string, value: string) => {
        handleFieldChange(name as keyof RegisterData, value);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–æ–ª—è (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç Redux, serverErrors –∏ useForm)
    const getFieldErrorWithServer = (fieldName: keyof RegisterData): string | undefined => {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –∏–∑ Redux
        const reduxError = reduxValidationErrors?.[fieldName]?.[0];
        if (reduxError) {
            console.log(`getFieldErrorWithServer –¥–ª—è –ø–æ–ª—è ${String(fieldName)} (Redux):`, reduxError);
            return reduxError;
        }
        
        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–µ)
        const serverError = serverErrors[fieldName]?.[0];
        if (serverError) {
            console.log(`getFieldErrorWithServer –¥–ª—è –ø–æ–ª—è ${String(fieldName)} (—Å–µ—Ä–≤–µ—Ä):`, serverError);
            return serverError;
        }
        
        // –í –∫–æ–Ω—Ü–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ useForm
        const formError = getFieldError(fieldName);
        if (formError) {
            console.log(`getFieldErrorWithServer –¥–ª—è –ø–æ–ª—è ${String(fieldName)} (—Ñ–æ—Ä–º–∞):`, formError);
            return formError;
        }
        
        console.log(`getFieldErrorWithServer –¥–ª—è –ø–æ–ª—è ${String(fieldName)}:`, undefined);
        return undefined;
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –ª—é–±–æ–º –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const hasAnyValidationErrors = (): boolean => {
        const requiredFields: (keyof RegisterData)[] = ['username', 'email', 'password', 'password2'];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –∏–∑ Redux
        if (reduxValidationErrors) {
            const hasReduxErrors = Object.keys(reduxValidationErrors).some(field => 
                reduxValidationErrors[field] && reduxValidationErrors[field].length > 0
            );
            if (hasReduxErrors) return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        const hasServerErrors = Object.keys(serverErrors).some(field => 
            serverErrors[field] && serverErrors[field].length > 0
        );
        if (hasServerErrors) return true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ useForm
        const hasFormErrors = requiredFields.some(field => getFieldError(field));
        if (hasFormErrors) return true;
        
        return false;
    };

    // –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
    const isFormReadyToSubmit = isFormValid && !hasAnyValidationErrors() && !isSubmitting;

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
    console.log('=== RegisterForm —Ä–µ–Ω–¥–µ—Ä ===');
    console.log('–¢–µ–∫—É—â–∏–µ validationErrors (useForm):', validationErrors);
    console.log('–¢–µ–∫—É—â–∏–µ reduxValidationErrors:', reduxValidationErrors);
    console.log('–¢–µ–∫—É—â–∏–µ serverErrors:', serverErrors);
    console.log('isSubmitting:', isSubmitting);
    console.log('isFormValid:', isFormValid);
    console.log('hasAnyValidationErrors():', hasAnyValidationErrors());
    console.log('isFormReadyToSubmit:', isFormReadyToSubmit);

    return (
        <FormContainer title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è">
            <ScrollView style={styles.scrollView}>
                <View style={styles.form}>
                    <View style={styles.inputContainer}>
                        <Text style={styles.label}>
                            –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            <Text style={styles.required}> *</Text>
                        </Text>
                        <TextInput
                            style={[styles.input, getFieldErrorWithServer('username') && styles.errorInput]}
                            value={values.username}
                            onChangeText={(text) => handleFieldChange('username', text)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                        />
                        {getFieldErrorWithServer('username') && (
                            <Text style={styles.errorText}>{getFieldErrorWithServer('username')}</Text>
                        )}
                    </View>

                    <View style={styles.inputContainer}>
                        <Text style={styles.label}>
                            Email
                            <Text style={styles.required}> *</Text>
                        </Text>
                        <TextInput
                            style={[styles.input, getFieldErrorWithServer('email') && styles.errorInput]}
                            value={values.email}
                            onChangeText={(text) => handleFieldChange('email', text)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ email"
                            keyboardType="email-address"
                            autoCapitalize="none"
                        />
                        {getFieldErrorWithServer('email') && (
                            <Text style={styles.errorText}>{getFieldErrorWithServer('email')}</Text>
                        )}
                    </View>

                    <View style={styles.inputContainer}>
                        <Text style={styles.label}>
                            –ò–º—è
                        </Text>
                        <TextInput
                            style={styles.input}
                            value={values.first_name}
                            onChangeText={(text) => handleFieldChange('first_name', text)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                        />
                    </View>

                    <View style={styles.inputContainer}>
                        <Text style={styles.label}>
                            –§–∞–º–∏–ª–∏—è
                        </Text>
                        <TextInput
                            style={styles.input}
                            value={values.last_name}
                            onChangeText={(text) => handleFieldChange('last_name', text)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                        />
                    </View>

                    <PasswordField
                        label="–ü–∞—Ä–æ–ª—å"
                        name="password"
                        value={values.password}
                        onChange={handlePasswordChange}
                        error={!!getFieldErrorWithServer('password')}
                        helperText={getFieldErrorWithServer('password')}
                        required
                    />
                    <PasswordField
                        label="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"
                        name="password2"
                        value={values.password2}
                        onChange={handlePasswordChange}
                        error={!!getFieldErrorWithServer('password2')}
                        helperText={getFieldErrorWithServer('password2')}
                        required
                    />
                    <PasswordRequirements password={values.password} username={values.username} />
                    <TouchableOpacity
                        style={[styles.button, !isFormReadyToSubmit && styles.buttonDisabled]}
                        onPress={handleSubmit}
                        disabled={!isFormReadyToSubmit}
                    >
                        <Text style={styles.buttonText}>
                            {isSubmitting ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
                        </Text>
                    </TouchableOpacity>
                    <View style={styles.loginLinkContainer}>
                        <Text style={styles.loginText}>
                            –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
                            <Text 
                                style={styles.loginLink}
                                onPress={() => navigation.navigate('Login')}
                            >
                                –í–æ–π—Ç–∏
                            </Text>
                        </Text>
                    </View>
                </View>
            </ScrollView>
        </FormContainer>
    );
};

const styles = StyleSheet.create({
    scrollView: {
        width: '100%',
    },
    form: {
        width: '100%',
        paddingBottom: 20,
    },
    inputContainer: {
        marginBottom: 16,
    },
    label: {
        fontSize: 16,
        marginBottom: 8,
        color: '#333',
    },
    required: {
        color: 'red',
    },
    input: {
        height: 48,
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 5,
        paddingHorizontal: 12,
        fontSize: 16,
    },
    errorInput: {
        borderColor: 'red',
    },
    errorText: {
        color: 'red',
        fontSize: 14,
    },
    button: {
        backgroundColor: '#1976d2',
        padding: 12,
        borderRadius: 5,
        alignItems: 'center',
        marginTop: 16,
    },
    buttonDisabled: {
        backgroundColor: '#ccc',
    },
    buttonText: {
        color: 'white',
        fontSize: 16,
        fontWeight: 'bold',
    },
    loginLinkContainer: {
        marginTop: 16,
        alignItems: 'center',
    },
    loginText: {
        fontSize: 14,
        color: '#666',
    },
    loginLink: {
        color: '#1976d2',
        fontWeight: 'bold',
    },
    passwordRequirements: {
        marginTop: 16,
        padding: 16,
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 5,
    },
    requirementsTitle: {
        fontSize: 18,
        fontWeight: 'bold',
        marginBottom: 16,
    },
    requirementItem: {
        marginBottom: 8,
    },
    requirementText: {
        fontSize: 16,
    },
    requirementMet: {
        color: 'green',
    },
    requirementNotMet: {
        color: 'red',
    },
}); 